#!/bin/bash -eu

# Test that a successful upgrade will cause a specific file to be
# created in the shared migation-logs directory.

. ./lib.bash
setup_standard

log "Upgrading central..." # see: https://docs.getodk.org/central-upgrade/
git_checkout "$targetVersion"

log "Restricting target volume size to confirm we don't need triple size..."
# TODO this doesn't actually prove that - we'd have to also restrict the original pg volume size too (could we?)
# base requirement:  55 MB
#       extra blob: 250 MB
#            total: 305 MB
exec_in_service_container create-blob.js
cat >>docker-compose.yml <<EOF
    driver: local
    driver_opts:
      device: ./files/postgres14/volume-postgres14
      type: tmpfs
      o: "size=305m"
EOF

rebuild_and_restart_containers

confirm_postgres_version 14
confirm_seed_data
confirm_postgres_version 14
confirm_backend_running_ok

if ! [[ -f ./postgres14-upgrade/upgrade-completed-ok ]]; then
  log "!!!"
  log "!!! ERROR: Upgrade success flag file not found!"
  log "!!!"
  exit 1
fi

log "Upgrade completed OK!"


log "Testing cleanup..."
volumeCount="$(docker volume ls | wc -l)"

log "Creating cleanup flag file..."
sudo touch ./postgres14-upgrade/delete-old-data-on-next-restart

freeSpace_before="$(df --output=avail . | tail -n1)"

log "Starting cleanup..."
docker-compose up --abort-on-container-exit postgres

freeSpace_after="$(df --output=avail . | tail -n1)"

newVolumeCount="$(docker volume ls | wc -l)"
if [[ "$newVolumeCount" != "$volumeCount" ]]; then
  log "!!!"
  log "!!! ERROR: Docker volume count has changed !!!"
  log "!!!"
  log "!!!   was: $volumeCount"
  log "!!!   now: $newVolumeCount"
  log "!!!"
  exit 1
fi

spaceFreed="$((freeSpace_after-freeSpace_before))"

log
log "Available disk space:"
log "  before: $freeSpace_before"
log "   after: $freeSpace_after"
log "   freed: $spaceFreed"
log

if [[ "$spaceFreed" -lt 305000 ]]; then
  log "!!!"
  log "!!! ERROR: not enough space freed !!!"
  log "!!!"
  exit 1
fi

log "Cleanup completed OK."
